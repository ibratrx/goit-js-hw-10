{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('[data-start]');\nconst dateTimePicker = document.getElementById('datetime-picker');\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nstartButton.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (!userSelectedDate) return;\n\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const now = new Date();\n    const timeDifference = userSelectedDate - now;\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n      updateTimerDisplay(0, 0, 0, 0);\n      dateTimePicker.disabled = false;\n      return;\n    }\n\n    const timeRemaining = convertMs(timeDifference);\n    updateTimerDisplay(timeRemaining.days, timeRemaining.hours, timeRemaining.minutes, timeRemaining.seconds);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay(days, hours, minutes, seconds) {\n  document.querySelector('[data-days]').textContent = String(days).padStart(2, '0');\n  document.querySelector('[data-hours]').textContent = String(hours).padStart(2, '0');\n  document.querySelector('[data-minutes]').textContent = String(minutes).padStart(2, '0');\n  document.querySelector('[data-seconds]').textContent = String(seconds).padStart(2, '0');\n}"],"names":["startButton","dateTimePicker","userSelectedDate","timerInterval","options","selectedDates","selectedDate","iziToast","flatpickr","timeDifference","updateTimerDisplay","timeRemaining","convertMs","ms","days","hours","minutes","seconds"],"mappings":"0IAKA,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAiB,SAAS,eAAe,iBAAiB,EAChE,IAAIC,EAAmB,KACnBC,EAAgB,KAEpBH,EAAY,SAAW,GAEvB,MAAMI,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDP,EAAY,SAAW,KAEvBE,EAAmBI,EACnBN,EAAY,SAAW,GAE1B,CACH,EAEAQ,EAAUP,EAAgBG,CAAO,EAEjCJ,EAAY,iBAAiB,QAAS,IAAM,CACrCE,IAELF,EAAY,SAAW,GACvBC,EAAe,SAAW,GAE1BE,EAAgB,YAAY,IAAM,CAEhC,MAAMM,EAAiBP,EADX,IAAI,KAGhB,GAAIO,GAAkB,EAAG,CACvB,cAAcN,CAAa,EAC3BO,EAAmB,EAAG,EAAG,EAAG,CAAC,EAC7BT,EAAe,SAAW,GAC1B,MACD,CAED,MAAMU,EAAgBC,EAAUH,CAAc,EAC9CC,EAAmBC,EAAc,KAAMA,EAAc,MAAOA,EAAc,QAASA,EAAc,OAAO,CACzG,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASP,EAAmBI,EAAMC,EAAOC,EAASC,EAAS,CACzD,SAAS,cAAc,aAAa,EAAE,YAAc,OAAOH,CAAI,EAAE,SAAS,EAAG,GAAG,EAChF,SAAS,cAAc,cAAc,EAAE,YAAc,OAAOC,CAAK,EAAE,SAAS,EAAG,GAAG,EAClF,SAAS,cAAc,gBAAgB,EAAE,YAAc,OAAOC,CAAO,EAAE,SAAS,EAAG,GAAG,EACtF,SAAS,cAAc,gBAAgB,EAAE,YAAc,OAAOC,CAAO,EAAE,SAAS,EAAG,GAAG,CACxF"}